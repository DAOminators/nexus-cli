#!/usr/bin/env python

import sys
import json
import os
from web3 import Web3
import argparse
import subprocess
#from dotenv import load_dotenv

def abort(msg=None):
    print(msg or 'Error occurred')
    sys.exit(1)

def ensure_repo(repo):
    if not repo:
        abort('A repository address is mandatory for this operation')
    if not Web3.isAddress(repo):
        abort('Invalid repository address')

def ensure_account(account):
    if not account:
        abort('An account is mandatory for this operation')
    if not Web3.is_address(account):
        abort('Invalid account')

print('Initialising...')
#load_dotenv()

# web3 = Web3(Web3.HTTPProvider(os.getenv('ETHEREUM_RPC_URL', 'http://localhost:8545')))
# if not web3.eth.default_account:
#     web3.eth.default_account = web3.eth.coinbase

parser = argparse.ArgumentParser(description='Nexus CLI')
parser.add_argument('-R', '--repo', type=str, help='Repository address')
parser.add_argument('--admin', action='store_true', help='Treat as administrator')
parser.add_argument('--account', type=str, help='Sender account (a current administrator)')
parser.add_argument('command', choices=['status', 'create', 'obsolete', 'authorize', 'deauthorize', 'login', 'default'], help='Command to execute')
parser.add_argument('address', nargs='?', help='Address to authorize/deauthorize')

args = parser.parse_args()

command = args.command

from_account = os.environ.get('WALLET_ID')
rpc_url = os.environ.get('RPC_URL')

if command == 'login':
    from_account = input('Enter your wallet ID: ')
    rpc_url = input('Enter your RPC URL: ')
    os.environ['WALLET_ID'] = from_account
    os.environ['RPC_URL'] = rpc_url
    print('Login successful')
    sys.exit(0)

web3 = Web3(Web3.HTTPProvider(rpc_url))

if args.account:
    ensure_account(args.account)
    from_account = args.account

repo_abi_path = os.path.join(os.path.dirname(__file__), 'contracts', 'MangoRepoABI.json')
repo_bin_path = os.path.join(os.path.dirname(__file__), 'contracts', 'MangoRepo.bin')

with open(repo_abi_path) as f:
    repo_abi = json.load(f)

with open(repo_bin_path) as f:
    repo_code = f.read()

if command == 'create':
    print(f'Creating new repository with administrator {from_account}')
    contract = web3.eth.contract(abi=repo_abi, bytecode=repo_code)
    tx_hash = contract.constructor().transact({'from': from_account})
    tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
    print(f'Repository created: {tx_receipt.contractAddress}')

elif command == 'status':
    print(f'Checking status of repository {args.repo}')
    ensure_repo(args.repo)
    contract = web3.eth.contract(address=args.repo, abi=repo_abi)
    version = contract.functions.repoInterfaceVersion().call()
    if version != 1:
        abort('Not a nexus repository?')
    if contract.functions.isObsolete().call():
        print('Repository is marked as OBSOLETE')
    ref_count = contract.functions.refCount().call()
    if ref_count == 0:
        print('No references')
    for i in range(ref_count):
        name = contract.functions.refName(i).call()
        ref = contract.functions.getRef(name).call()
        print(f'Reference: {name} -> {ref}')
    snapshot_count = contract.functions.snapshotCount().call()
    if snapshot_count == 0:
        print('No snapshots')
    for i in range(snapshot_count):
        print(f'Snapshot #{i}: {contract.functions.getSnapshot(i).call()}')

elif command == 'obsolete':
    print(f'Marking {args.repo} as obsolete')
    ensure_repo(args.repo)
    contract = web3.eth.contract(address=args.repo, abi=repo_abi)
    tx_hash = contract.functions.setObsolete().transact({'from': from_account})
    print(f'Sent transaction: {tx_hash.hex()}')

elif command == 'authorize':
    print(f'Authorizing {args.address} for {args.repo} as {"admin" if args.admin else "committer"}')
    ensure_repo(args.repo)
    ensure_account(args.address)
    contract = web3.eth.contract(address=args.repo, abi=repo_abi)
    tx_hash = contract.functions.authorize(args.address, args.admin).transact({'from': from_account})
    print(f'Sent transaction: {tx_hash.hex()}')

elif command == 'deauthorize':
    print(f'Deauthorizing {args.address} for {args.repo} as {"admin" if args.admin else "committer"}')
    ensure_repo(args.repo)
    ensure_account(args.address)
    contract = web3.eth.contract(address=args.repo, abi=repo_abi)
    tx_hash = contract.functions.deauthorize(args.address, args.admin).transact({'from': from_account})
    print(f'Sent transaction: {tx_hash.hex()}')

elif command == 'default':
    print(f'WALLET_ID: {from_account}')
    print(f'RPC_URL: {rpc_url}')

else:
    print("INVALID COMMAND")
    parser.print_help()